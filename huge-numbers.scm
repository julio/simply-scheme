(define )

;;; Say a 3 digit number
(define (say-three-digit-number sent)
  (cond ((= 0 (count sent)) '())
        ((= 1 (count sent)) (se (say-singles sent)))
        ((= 2 (count sent)) (se (say-tens sent)))
        ((= 3 (count sent)) (se (say-singles (first sent)) 'hundred (say-three-digit-number (word (bf sent)))))
        (else 'error1)))
;;; say 1, 2, ... 9
(define (say-singles n)
  (cond ((eq? '0 n) '())
        ((eq? '1 n) 'one)
        ((eq? '2 n) 'two)
        ((eq? '3 n) 'three)
        ((eq? '4 n) 'four)
        ((eq? '5 n) 'five)
        ((eq? '6 n) 'six)
        ((eq? '7 n) 'seven)
        ((eq? '8 n) 'eight)
        ((eq? '9 n) 'nine)
        (else (se 'error2 '- n))))

;;; Say 10, 11, ..., 20, 21, ... 99
(define (say-tens nn)
  (cond ((eq? '0 (first nn)) '())
        ((eq? '1 (first nn)) (say-teens nn))
        ((eq? '2 (first nn)) (se 'twenty  (say-singles (bf nn))))
        ((eq? '3 (first nn)) (se 'thirty  (say-singles (bf nn))))
        ((eq? '4 (first nn)) (se 'forty   (say-singles (bf nn))))
        ((eq? '5 (first nn)) (se 'fifty   (say-singles (bf nn))))
        ((eq? '6 (first nn)) (se 'sixty   (say-singles (bf nn))))
        ((eq? '7 (first nn)) (se 'seventy (say-singles (bf nn))))
        ((eq? '8 (first nn)) (se 'eighty  (say-singles (bf nn))))
        ((eq? '9 (first nn)) (se 'ninety  (say-singles (bf nn))))
        (else 'error3)))

;;; Say 10, 11, 12, ... 19
(define (say-teens nn)
  (cond ((eq? '10 nn) 'ten)
        ((eq? '11 nn) 'eleven)
        ((eq? '12 nn) 'twelve)
        ((eq? '13 nn) 'thirteen)
        ((eq? '14 nn) 'forteen)
        ((eq? '15 nn) 'fifteen)
        ((eq? '16 nn) 'sixteen)
        ((eq? '17 nn) 'seventeen)
        ((eq? '18 nn) 'eighteen)
        ((eq? '19 nn) 'nineteen)
        (else 'error4)))
